import pickle
import os
import logging
import xml.etree.ElementTree as ET
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.events import EventFiringWebDriver, AbstractEventListener
from config import URLS, PATHS, USUARIOS

# Configuración de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('SIGEVI_QA')

class WebDriverListener(AbstractEventListener):
    """Manejador de eventos del navegador"""
    def on_exception(self, exception, driver):
        logger.error(f"Error en el navegador: {exception}")

def before_all(context):
    """Configuración global que se ejecuta una vez al inicio"""
    # Crear directorios necesarios
    os.makedirs(PATHS["SCREENSHOTS"], exist_ok=True)
    os.makedirs(PATHS["TEST_RESULTS"], exist_ok=True)  # Nuevo directorio para resultados
    
    # Inicializar estructura para reporte JUnit
    context.junit_testsuite = ET.Element('testsuite', name='SIGEVI Tests')
    context.scenario_start_time = None
    
    # Resto de tu configuración existente...
    context.base_url = URLS["BASE"]
    context.default_wait = 15
    context.usuario = USUARIOS["OPERADOR_SIGEVI"]
    
    context.chrome_options = Options()
    context.chrome_options.add_argument('--start-maximized')
    context.chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
    
    try:
        context.driver = EventFiringWebDriver(
            webdriver.Chrome(options=context.chrome_options),
            WebDriverListener()
        )
        context.driver.set_page_load_timeout(30)
        context.driver.implicitly_wait(10)
        logger.info("Navegador inicializado correctamente")
    except Exception as e:
        logger.error(f"Error al iniciar navegador: {str(e)}")
        raise

def before_scenario(context, scenario):
    """Se ejecuta antes de cada escenario"""
    context.scenario_start_time = datetime.now()
    logger.info(f"\nIniciando escenario: {scenario.name}")
    
    # Resto de tu lógica existente para cookies...
    if os.path.exists(PATHS["COOKIES"]):
        try:
            context.driver.get(context.base_url)
            cookies = pickle.load(open(PATHS["COOKIES"], "rb"))
            for cookie in cookies:
                context.driver.add_cookie(cookie)
            context.driver.refresh()
            logger.info("Cookies de sesión cargadas exitosamente")
        except Exception as e:
            logger.warning(f"Error al cargar cookies: {str(e)}")
            os.remove(PATHS["COOKIES"])

def after_scenario(context, scenario):
    """Se ejecuta después de cada escenario"""
    # Calcular duración del escenario
    duration = (datetime.now() - context.scenario_start_time).total_seconds()
    
    # Crear elemento testcase para JUnit
    testcase = ET.SubElement(context.junit_testsuite, 'testcase',
                           classname=scenario.feature.name,
                           name=scenario.name,
                           time=str(duration))
    
    # Manejo de fallos
    if scenario.status == "failed":
        failure = ET.SubElement(testcase, 'failure', message="Test Failed")
        failure.text = str(scenario.exception)
        screenshot_name = f"error_{scenario.name.replace(' ', '_')}.png"
        context.driver.save_screenshot(f"{PATHS['SCREENSHOTS']}/{screenshot_name}")
        logger.error(f"Scenario fallido. Screenshot: {screenshot_name}")
    
    # Limpieza existente...
    if not hasattr(context, 'driver') or context.driver is None:
        return
        
    try:
        context.driver.delete_all_cookies()
        context.driver.execute_script("window.localStorage.clear();")
        context.driver.execute_script("window.sessionStorage.clear();")
    except Exception as e:
        logger.warning(f"Error al limpiar estado: {str(e)}")

def after_all(context):
    """Limpieza final después de todas las pruebas"""
    # Generar archivo JUnit XML
    try:
        results_file = f"{PATHS['TEST_RESULTS']}/results.xml"
        tree = ET.ElementTree(context.junit_testsuite)
        tree.write(results_file, encoding='utf-8', xml_declaration=True)
        logger.info(f"Reporte JUnit generado en: {results_file}")
    except Exception as e:
        logger.error(f"Error al generar reporte JUnit: {str(e)}")
    
    # Resto de tu limpieza existente...
    if hasattr(context, 'driver') and context.driver is not None:
        try:
            context.driver.quit()
            logger.info("Navegador cerrado")
        except Exception as e:
            logger.error(f"Error al cerrar navegador: {str(e)}")
    
    if os.path.exists(PATHS["COOKIES"]):
        try:
            os.remove(PATHS["COOKIES"])
        except Exception as e:
            logger.error(f"Error al eliminar cookies: {str(e)}")
    
    logger.info("Pruebas completadas. Recursos liberados")